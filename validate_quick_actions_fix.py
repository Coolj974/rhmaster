#!/usr/bin/env python
"""
Script de validation automatique des corrections de la fen√™tre d'actions rapides
Ce script v√©rifie que toutes les corrections ont √©t√© appliqu√©es correctement
"""
import os
import re

def check_dashboard_file():
    """V√©rifie les corrections dans le fichier dashboard.html"""
    print("üîç V√©rification du fichier dashboard.html...")
    
    file_path = "templates/rh_management/dashboard.html"
    
    if not os.path.exists(file_path):
        print(f"‚ùå Fichier non trouv√©: {file_path}")
        return False
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Tests de v√©rification
    checks = [
        # V√©rification des √©l√©ments DOM
        (r'if \(!quickActionsCard \|\| !quickActionsBody', 
         "‚úÖ Validation des √©l√©ments DOM"),
        
        # Gestion d'erreur localStorage
        (r'try\s*\{\s*cardPosition = JSON\.parse',
         "‚úÖ Gestion d'erreur localStorage"),
        
        # Calcul de position am√©lior√©
        (r'getBoundingClientRect\(\)',
         "‚úÖ Calcul de position am√©lior√©"),
        
        # preventDefault ajout√©
        (r'e\.preventDefault\(\)',
         "‚úÖ preventDefault ajout√©"),
        
        # Gestion du redimensionnement
        (r'window\.addEventListener\([\'"]resize[\'"]',
         "‚úÖ Gestion du redimensionnement"),
        
        # Styles CSS dragging
        (r'\.quick-actions-floating\.dragging',
         "‚úÖ Styles CSS dragging"),
        
        # √âtat pinned
        (r'quickActionsCard\.classList\.add\([\'"]pinned[\'"]',
         "‚úÖ Gestion √©tat pinned"),
        
        # Try-catch sur les √©v√©nements
        (r'try\s*\{\s*quickActionsBody\.style\.display',
         "‚úÖ Try-catch sur √©v√©nements"),
    ]
    
    results = []
    for pattern, description in checks:
        if re.search(pattern, content, re.MULTILINE | re.DOTALL):
            print(f"  {description}")
            results.append(True)
        else:
            print(f"  ‚ùå Manquant: {description}")
            results.append(False)
    
    return all(results)

def check_urls_exist():
    """V√©rifie que les URLs des actions rapides existent"""
    print("\nüîç V√©rification des URLs...")
    
    import sys
    sys.path.insert(0, '.')
    
    try:
        import os
        import django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hr_tool.settings')
        django.setup()
        
        from django.urls import reverse
        
        urls_to_check = [
            'leave_request',
            'submit_expense',
            'submit_kilometric_expense',
            'profile'
        ]
        
        all_good = True
        for url_name in urls_to_check:
            try:
                url = reverse(url_name)
                print(f"  ‚úÖ {url_name}: {url}")
            except Exception as e:
                print(f"  ‚ùå {url_name}: {e}")
                all_good = False
        
        return all_good
        
    except Exception as e:
        print(f"  ‚ùå Erreur Django: {e}")
        return False

def check_javascript_syntax():
    """V√©rification basique de la syntaxe JavaScript"""
    print("\nüîç V√©rification syntaxe JavaScript...")
    
    file_path = "templates/rh_management/dashboard.html"
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Extraire le JavaScript
    js_blocks = re.findall(r'<script[^>]*>(.*?)</script>', content, re.DOTALL)
    
    if not js_blocks:
        print("  ‚ùå Aucun bloc JavaScript trouv√©")
        return False
    
    # V√©rifications syntaxiques basiques
    js_content = '\n'.join(js_blocks)
    
    syntax_checks = [
        (r'function\s+\w+\s*\([^)]*\)\s*\{', "D√©clarations de fonctions"),
        (r'addEventListener\s*\([^)]+\)', "Event listeners"),
        (r'localStorage\.(get|set)Item', "Utilisation localStorage"),
        (r'try\s*\{[^}]+\}\s*catch', "Blocs try-catch"),
    ]
    
    for pattern, description in syntax_checks:
        if re.search(pattern, js_content):
            print(f"  ‚úÖ {description}")
        else:
            print(f"  ‚ö†Ô∏è  {description} non trouv√©")
    
    # V√©rifier les accolades √©quilibr√©es (basique)
    open_braces = js_content.count('{')
    close_braces = js_content.count('}')
    
    if open_braces == close_braces:
        print(f"  ‚úÖ Accolades √©quilibr√©es ({open_braces}/{close_braces})")
        return True
    else:
        print(f"  ‚ùå Accolades d√©s√©quilibr√©es ({open_braces}/{close_braces})")
        return False

def main():
    print("=" * 60)
    print("üß™ VALIDATION DES CORRECTIONS - FEN√äTRE D'ACTIONS RAPIDES")
    print("=" * 60)
    
    # Tests
    dashboard_ok = check_dashboard_file()
    urls_ok = check_urls_exist()
    js_ok = check_javascript_syntax()
    
    print("\n" + "=" * 60)
    print("üìä R√âSULTATS DE LA VALIDATION")
    print("=" * 60)
    
    print(f"Dashboard HTML: {'‚úÖ OK' if dashboard_ok else '‚ùå √âCHEC'}")
    print(f"URLs Django:    {'‚úÖ OK' if urls_ok else '‚ùå √âCHEC'}")
    print(f"JavaScript:     {'‚úÖ OK' if js_ok else '‚ùå √âCHEC'}")
    
    if dashboard_ok and urls_ok and js_ok:
        print("\nüéâ SUCC√àS ! Toutes les corrections sont en place")
        print("\nüìù Actions suivantes recommand√©es:")
        print("1. D√©marrer le serveur: python manage.py runserver")
        print("2. Ouvrir le dashboard dans le navigateur")
        print("3. Tester la fen√™tre d'actions rapides")
        print("4. Suivre le guide de test: GUIDE_TEST_QUICK_ACTIONS.md")
        return True
    else:
        print("\n‚ùå DES PROBL√àMES PERSISTENT")
        print("Consultez les d√©tails ci-dessus pour identifier les corrections manquantes")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)

#!/usr/bin/env python
"""
Test pour v√©rifier les corrections apport√©es √† la fen√™tre d'actions rapides
"""
import os, sys, django

# Configuration Django
sys.path.insert(0, '.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hr_tool.settings')
django.setup()

from django.test import Client
from django.contrib.auth.models import User

def test_dashboard_rendering():
    """Test que le dashboard se rend correctement avec la fen√™tre d'actions rapides"""
    print("=== TEST DE RENDU DU DASHBOARD ===")
    
    try:
        # Cr√©er un client de test
        client = Client()
        
        # Cr√©er ou r√©cup√©rer un utilisateur
        user, created = User.objects.get_or_create(
            username='test_user',
            defaults={'email': 'test@example.com', 'password': 'testpass'}
        )
        
        # Se connecter
        client.force_login(user)
        
        # Appeler la vue dashboard
        response = client.get('/dashboard/')
        
        if response.status_code == 200:
            print("‚úÖ Dashboard accessible (HTTP 200)")
            
            # V√©rifier que les √©l√©ments de la fen√™tre d'actions rapides sont pr√©sents
            content = response.content.decode('utf-8')
            
            elements_to_check = [
                'quickActionsCard',
                'quickActionsBody', 
                'quickActionsMinimized',
                'pinQuickActions',
                'minimizeQuickActions',
                'expandQuickActions',
                'setupQuickActions'
            ]
            
            missing_elements = []
            for element in elements_to_check:
                if element not in content:
                    missing_elements.append(element)
                else:
                    print(f"‚úÖ {element} trouv√©")
            
            if missing_elements:
                print(f"‚ùå √âl√©ments manquants: {missing_elements}")
                return False
            else:
                print("‚úÖ Tous les √©l√©ments de la fen√™tre d'actions rapides sont pr√©sents")
                
            # V√©rifier les styles CSS pour la fen√™tre
            css_elements = [
                'quick-actions-floating',
                'dragging',
                'pinned'
            ]
            
            for css_element in css_elements:
                if css_element in content:
                    print(f"‚úÖ CSS classe '{css_element}' trouv√©e")
                else:
                    print(f"‚ö†Ô∏è  CSS classe '{css_element}' non trouv√©e")
            
            return True
            
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_dashboard_urls():
    """Test que les URLs utilis√©es dans les actions rapides existent"""
    print("\n=== TEST DES URLs DES ACTIONS RAPIDES ===")
    
    from django.urls import reverse
    
    urls_to_test = [
        'leave_request',
        'submit_expense', 
        'submit_kilometric_expense',
        'profile'
    ]
    
    all_urls_valid = True
    
    for url_name in urls_to_test:
        try:
            url = reverse(url_name)
            print(f"‚úÖ {url_name}: {url}")
        except Exception as e:
            print(f"‚ùå {url_name}: {e}")
            all_urls_valid = False
    
    return all_urls_valid

def main():
    print("VALIDATION DES CORRECTIONS DE LA FEN√äTRE D'ACTIONS RAPIDES")
    print("=" * 65)
    
    dashboard_ok = test_dashboard_rendering()
    urls_ok = test_dashboard_urls()
    
    print("\n" + "=" * 65)
    if dashboard_ok and urls_ok:
        print("üéâ SUCC√àS ! Toutes les validations sont pass√©es")
        print("‚úÖ La fen√™tre d'actions rapides devrait fonctionner correctement")
        print("\nAm√©liorations apport√©es:")
        print("- ‚úÖ Gestion d'erreur am√©lior√©e pour localStorage")
        print("- ‚úÖ Validation des √©l√©ments DOM avant utilisation")
        print("- ‚úÖ Calcul de position de drag & drop am√©lior√©")
        print("- ‚úÖ Gestion du redimensionnement de fen√™tre")
        print("- ‚úÖ Styles CSS pour les √©tats dragging/pinned")
        print("- ‚úÖ Protection contre les erreurs JavaScript")
    else:
        print("‚ùå DES PROBL√àMES PERSISTENT")
        if not dashboard_ok:
            print("- Dashboard non accessible ou √©l√©ments manquants")
        if not urls_ok:
            print("- URLs des actions rapides non valides")

if __name__ == "__main__":
    main()

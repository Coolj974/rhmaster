#!/usr/bin/env python
"""
Script de v√©rification de la correction du probl√®me de profil
"""
import os
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hr_tool.settings')
django.setup()

from django.contrib.auth.models import User
from rh_management.models import Profile, Department

def test_profile_fix():
    print("=== V√âRIFICATION DE LA CORRECTION DU PROFIL ===\n")
    
    # 1. V√©rifier les utilisateurs existants
    users = User.objects.all()
    print(f"Nombre d'utilisateurs dans la base: {users.count()}")
    
    if users.count() == 0:
        print("‚ùå Aucun utilisateur trouv√© - cr√©ons un utilisateur de test")
        user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            first_name='Test',
            last_name='User'
        )
        print(f"‚úÖ Utilisateur de test cr√©√©: {user.username}")
    else:
        user = users.first()
        print(f"‚úÖ Utilisation de l'utilisateur existant: {user.username}")
    
    # 2. V√©rifier les d√©partements
    departments = Department.objects.all()
    print(f"\nNombre de d√©partements: {departments.count()}")
    
    if departments.count() == 0:
        print("‚ùå Aucun d√©partement trouv√© - cr√©ons des d√©partements de test")
        dept1 = Department.objects.create(name="Test IT", is_active=True)
        dept2 = Department.objects.create(name="Test RH", is_active=True)
        print(f"‚úÖ D√©partements cr√©√©s: {dept1.name}, {dept2.name}")
    else:
        for dept in departments:
            print(f"  - {dept.name} (ID: {dept.id})")
    
    # 3. Tester la r√©cup√©ration/cr√©ation du profil
    print(f"\n=== TEST DU PROFIL POUR {user.username} ===")
    
    profile, created = Profile.objects.get_or_create(user=user)
    print(f"Profil cr√©√©: {created}")
    print(f"ID du profil: {profile.id}")
    
    # 4. Afficher l'√©tat actuel
    print(f"\n√âtat actuel du profil:")
    print(f"  - T√©l√©phone: '{profile.phone_number or 'Vide'}'")
    print(f"  - Adresse: '{profile.address or 'Vide'}'")
    print(f"  - Position: '{profile.position or 'Vide'}'")
    print(f"  - D√©partement: {profile.department or 'Aucun'}")
    print(f"  - Photo de profil: {profile.profile_picture or 'Aucune'}")
    
    # 5. Test de mise √† jour
    print(f"\n=== TEST DE MISE √Ä JOUR ===")
    
    # Sauvegarder les anciennes valeurs
    old_phone = profile.phone_number
    old_address = profile.address
    old_position = profile.position
    old_department = profile.department
    
    # Appliquer de nouvelles valeurs
    profile.phone_number = "+33123456789"
    profile.address = "123 Rue de la Correction, 75001 Paris"
    profile.position = "D√©veloppeur Senior Corrig√©"
    
    # Assigner un d√©partement si disponible
    if departments.exists():
        profile.department = departments.first()
    
    # Sauvegarder
    try:
        profile.save()
        print("‚úÖ Profil sauvegard√© avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")
        return False
    
    # 6. V√©rifier que les donn√©es sont bien persist√©es
    print(f"\n=== V√âRIFICATION DE LA PERSISTANCE ===")
    
    # Recharger depuis la base
    profile.refresh_from_db()
    
    # V√©rifier les nouvelles valeurs
    checks = [
        ("T√©l√©phone", profile.phone_number, "+33123456789"),
        ("Adresse", profile.address, "123 Rue de la Correction, 75001 Paris"),
        ("Position", profile.position, "D√©veloppeur Senior Corrig√©"),
    ]
    
    all_good = True
    for field_name, actual, expected in checks:
        if actual == expected:
            print(f"‚úÖ {field_name}: '{actual}'")
        else:
            print(f"‚ùå {field_name}: attendu '{expected}', obtenu '{actual}'")
            all_good = False
    
    if profile.department and departments.exists():
        print(f"‚úÖ D√©partement: {profile.department.name}")
    elif not departments.exists():
        print("‚ö†Ô∏è  D√©partement: aucun d√©partement disponible pour le test")
    else:
        print("‚ùå D√©partement: non assign√©")
        all_good = False
    
    # 7. Test de la vue (simulation)
    print(f"\n=== SIMULATION DE LA VUE profile_view ===")
    
    # Simuler ce que fait la vue profile_view
    profile_from_view, created_in_view = Profile.objects.get_or_create(user=user)
    
    print(f"Profil r√©cup√©r√© par get_or_create: ID {profile_from_view.id}")
    print(f"M√™me instance que le profil test√©: {profile_from_view.id == profile.id}")
    
    # V√©rifier que les donn√©es sont visibles
    display_checks = [
        ("T√©l√©phone affich√©", profile_from_view.phone_number or "Non renseign√©"),
        ("Adresse affich√©e", profile_from_view.address or "Non renseign√©"),
        ("Position affich√©e", profile_from_view.position or "Non renseign√©"),
        ("D√©partement affich√©", str(profile_from_view.department) if profile_from_view.department else "Non renseign√©"),
    ]
    
    print(f"\nDonn√©es qui seront affich√©es dans le template:")
    for label, value in display_checks:
        status = "‚úÖ" if value != "Non renseign√©" else "‚ùå"
        print(f"  {status} {label}: '{value}'")
    
    # 8. R√©sultat final
    print(f"\n=== R√âSULTAT FINAL ===")
    
    if all_good and profile_from_view.phone_number:
        print("üéâ SUCCESS! La correction fonctionne correctement.")
        print("   Les donn√©es du profil sont maintenant sauvegard√©es et affich√©es.")
        return True
    else:
        print("‚ùå √âCHEC: Il reste des probl√®mes √† r√©soudre.")
        return False

if __name__ == "__main__":
    test_profile_fix()

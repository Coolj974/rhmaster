#!/usr/bin/env python
"""
Test final pour valider la correction du probl√®me de notifications infinies.
Ce script simule exactement ce que fait l'API /api/notifications/dropdown/
"""
import os
import sys
import django

# Configuration Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hr_tool.settings')
django.setup()

from django.http import JsonResponse
from django.template.loader import render_to_string
from django.contrib.auth.models import User
from django.test import RequestFactory
from rh_management.models import Notification
from rh_management.views.notification_views import get_notifications_dropdown
import json

def simulate_dropdown_api():
    """Simule exactement l'appel de l'API dropdown"""
    print("=== SIMULATION DE L'API DROPDOWN ===")
    
    try:
        # Cr√©er un utilisateur de test si n√©cessaire
        user, created = User.objects.get_or_create(
            username='test_user',
            defaults={'email': 'test@example.com'}
        )
        if created:
            print(f"‚úÖ Utilisateur de test cr√©√©: {user.username}")
        else:
            print(f"‚úÖ Utilisateur de test r√©cup√©r√©: {user.username}")
        
        # Cr√©er une factory de requ√™tes pour simuler la requ√™te HTTP
        factory = RequestFactory()
        request = factory.get('/api/notifications/dropdown/')
        request.user = user
        
        # Cr√©er quelques notifications de test si elles n'existent pas
        if not Notification.objects.filter(user=user).exists():
            Notification.objects.create(
                user=user,
                title="Notification de test 1",
                message="Premi√®re notification de test",
                notification_type="system",
                color="primary",
                icon="fa-bell",
                url="/dashboard/"
            )
            Notification.objects.create(
                user=user,
                title="Notification de test 2", 
                message="Deuxi√®me notification de test",
                notification_type="system",
                color="success",
                icon="fa-check",
                url="/profile/",
                read=True
            )
            print("‚úÖ Notifications de test cr√©√©es")
        
        # Appeler directement la fonction de vue
        print("üì° Appel de get_notifications_dropdown...")
        response = get_notifications_dropdown(request)
        
        # V√©rifier la r√©ponse
        if response.status_code == 200:
            print("‚úÖ R√©ponse HTTP 200 OK")
            
            # D√©coder la r√©ponse JSON
            content = json.loads(response.content.decode('utf-8'))
            print(f"‚úÖ JSON d√©cod√© avec succ√®s")
            print(f"   - Nombre de notifications non lues: {content.get('count', 'N/A')}")
            print(f"   - HTML g√©n√©r√©: {len(content.get('html', ''))} caract√®res")
            
            # V√©rifier que le HTML contient les URLs corrig√©es
            html = content.get('html', '')
            if 'notifications_page' in html:
                print("‚úÖ URL 'notifications_page' trouv√©e dans le HTML")
            else:
                print("‚ö†Ô∏è  URL 'notifications_page' non trouv√©e dans le HTML")
                
            if 'mark_all_read' in html:
                print("‚úÖ URL 'mark_all_read' trouv√©e dans le HTML")
            else:
                print("‚ö†Ô∏è  URL 'mark_all_read' non trouv√©e dans le HTML")
            
            return True, content
            
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}")
            print(f"   Contenu: {response.content.decode('utf-8')}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå Exception durant l'appel API: {e}")
        import traceback
        traceback.print_exc()
        return False, None

def main():
    print("TEST FINAL DE LA CORRECTION DES NOTIFICATIONS")
    print("=" * 60)
    
    success, response_data = simulate_dropdown_api()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ SUCC√àS ! L'API fonctionne correctement")
        print("‚úÖ Le probl√®me de chargement infini devrait √™tre r√©solu")
        print("\nR√©sum√© de la correction:")
        print("- ‚úÖ URL 'notifications' corrig√©e en 'notifications_page'")
        print("- ‚úÖ Template rendu sans erreur")
        print("- ‚úÖ JSON valide retourn√© par l'API")
    else:
        print("‚ùå √âCHEC - Des probl√®mes persistent")
        print("Des corrections suppl√©mentaires sont n√©cessaires")

if __name__ == "__main__":
    main()
